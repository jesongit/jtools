import winex;
import win.ui;
import plugins;
import console
import key.hotkey
import win.ui.menu;
import win.util.tray;
/*DSG{{*/
mainForm = win.form(text="jtools";right=499;bottom=49;acceptfiles=1;border="none";exmode="toolwindow")
mainForm.add(
custom={cls="custom";text="自定义控件";left=0;top=50;right=500;bottom=400;acceptfiles=1;hide=1;repeat="center";z=2};
edit={cls="edit";left=0;top=0;right=500;bottom=50;autovscroll=false;edge=1;font=LOGFONT(h=-35);z=1}
)
/*}}*/

// 载入可能用到的子窗口
var listWin = mainForm.custom.loadForm("\dlg\list.aardio")
var setLink = mainForm.custom.loadForm("\dlg\setLink.aardio")
var settingWin = mainForm.loadForm("\dlg\setLink.aardio");

mainForm.custom.orphanWindow()	// 设置为悬浮窗口

console.log()

var mod = 'default'
var result = {}

// 选择快捷键
selectOne = function(index){
	if(result[[index]])
		plugins.open(mod, result[index])
}


// 显示子窗口
showSubWin = function(subWin){
	subWin.show()
	mainForm.custom.show()
}

// 关闭子窗口
hideSubWin = function(){
	// 无法隐藏子窗口
	mainForm.custom.
	mainForm.custom.show(false)
	if mainForm.edit.text != ""
		mainForm.edit.text = ""
}

// 打开设置
openSetting = function(){
	settingWin.show();
	settingWin.doModal()
}

// 显示/隐藏界面
switchMain = function(){
	var isVisible = winex.isVisible(mainForm.hwnd)
	if(!isVisible)
		hideSubWin()
	mainForm.show(!isVisible)
}

// 托盘菜单
var trayCfg={
	[0x205/*_WM_RBUTTONUP*/  ] = function(wParam){
	    win.setForeground(mainForm.hwnd,true)
		mainForm.popmenu = win.ui.popmenu(mainForm);
		mainForm.popmenu.add('&退出',function(id){ mainForm.close() })
	    mainForm.popmenu.popup();
	    mainForm.popmenu.close();
	};
	[0x202/*_WM_LBUTTONUP*/] = function(wParam){ switchMain()};
}

var hotkeyCfg = {
	["ALT+SPACE"] = λ(...) switchMain();
	["ALT+q"] = λ(...) selectOne(1);
	["ALT+w"] = λ(...) selectOne(2);
	["ALT+e"] = λ(...) selectOne(3);
	["ALT+r"] = λ(...) selectOne(4);
	["ALT+s"] = λ(...) openSetting();
}


var superHotkey = key.hotkey(mainForm) //创建超级热键,必须用于窗口程序中
superHotkey.loadTable(hotkeyCfg)

// 托盘图标
mainForm.tray = win.util.tray(mainForm)
mainForm.tray.tip = "jtools" //设置鼠标提示
mainForm.onTrayMessage = trayCfg

// 根据文本框变化调用对应接口
mainForm.edit.onChange = function(){
	var text = string.trim(mainForm.edit.text)
	if(text == "") {
		mainForm.custom.show(false)
		return
	}
	result = plugins.search(mod, text)
	//console.dump(result, #result)
	if(..table.len(result)){
		var items = {}
		for(_, v in result)
			..table.push(items, v["name"])
		listWin.listbox.items = items
		showSubWin(listWin)
	}
}

// 转移焦点
mainForm.beforeShowWindow = function(...){ mainForm.edit.setFocus() }
mainForm.custom.beforeShowWindow = function(shown,status){ mainForm.edit.setFocus() }

// 按下回车的操作
mainForm.edit.onOk = function(){ selectOne(1) }

// 按下 Esc 的操作
mainForm.edit.onCancel = function(){
	if(mainForm.edit.text == '')
		win.quitMessage()
	else
		hideSubWin()
	return true
}

// 拖入文件后的操作
mainForm.wndproc = {
	[0x233/*_WM_DROPFILES*/] = function(hwnd,message,wParam,lParam){
		::User32.PostMessage(setLink.hwnd, message, wParam, lParam)
		showSubWin(setLink)
	}
}

mainForm.show()
return win.loopMessage();